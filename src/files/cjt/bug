{"1constant":{"properties":{},"schematic":[["port",[-192,-48,2],{"signal":"out0"}],["user:ZERO",[-184,-40,0]],["port",[-192,-64,2],{"signal":"out1"}],["user:ONE",[-184,-56,0]],["text",[-280,-104,0],{"text":"BUG: Why doesn't my 1 constant work???"}],["text",[-257,-90,0],{"text":"ZERO seems fine..."}]],"icon":[["line",[-32,-24,0,0,32]],["line",[-32,8,0,48,0]],["line",[16,8,0,0,-32]],["line",[16,-24,0,-48,0]],["text",[-8,-11,0],{"text":"BUG","align":"center","font":"10pt sans-serif"}],["terminal",[24,-16,2],{"name":"out1"}],["terminal",[24,0,2],{"name":"out0"}]],"test":[["test","// set up Vdd, establish signaling voltages\n.power Vdd=1\n// Vol, Voh set voltages generated for input signals\n// Vil, Vih set voltage thresholds for determining logic values\n.thresholds Vol=0 Vil=0.1 Vih=0.9 Voh=1\n\n// test actions are applied to named groups of signals.\n// A signal can appear in more than one group.  Order\n// of groups and signals within each group determine \n// order of values on each line of test values\n.group outputs out0 out1\n\n// set type of simulation to be performed\n//  device -- transient simulation; components must be from from analog library\n//  gate -- gate-level simulation; components must be from gates library\n.mode gate\n\n/*\nTests are sequences of lines supplying test values; .cycle specifies\nthe sequence of actions that will be performed for each test.  Available\nactions are\n   assert group -- set values for signals in group with H,L test values\n   deassert group -- stop setting values for signals in group with H,L test values\n   sample group -- check values of signals in group with 0,1 test values\n   tran time -- run simulation for specified time interval\n   signal=val -- set signal to specified value\n*/\n.cycle tran 99n sample outputs tran 1n\n\n// the tests themselves -- one test per line\n//   to assert signal this cycle use 0,1; use Z or - if not to be asserted\n//   to sample signal this cycle use L,H; use - if not to be sampled\n// whitespace can be used to improve readability, non-blank characters\n// are associated, in order, with signals listed in .group above.\n\n0 1\n\n\n// (optional) produce plots showing the test inputs and/or outputs\n.plot out0, out1\n\n"]]},"":{"properties":{},"test":[["test",""]]},"hangs":{"properties":{},"schematic":[["gates:dreg",[-48,-80,0]],["port",[-48,-64,0],{"signal":"CLK"}],["port",[-8,-80,2],{"signal":"PC[31:2]"}],["port",[-8,-40,2],{"signal":"PC[1:0]"}],["port",[-48,-80,0],{"signal":"NPC[31:2]"}],["gates:mux2",[16,40,0]],["gates:mux4",[-80,16,0]],["wire",[-48,40,0,64,0]],["port",[-64,80,0],{"signal":"PCSEL[1:0]"}],["port",[-64,96,0],{"signal":"PCSEL[2]"}],["port",[96,56,2],{"signal":"NPC[31:2]"}],["port",[-80,64,0],{"signal":"PC[31],PCINC[30:2]"}],["port",[-80,48,0],{"signal":"PC[31],BT[30:2]"}],["port",[-80,32,0],{"signal":"JT[31:2]"}],["port",[-80,16,0],{"signal":"ILLOP[31:2]"}],["port",[16,56,0],{"signal":"XINT[31:2]"}],["text",[-159,-104,0],{"text":"Here's the actual PC: a 30-bit register"}],["text",[-161,-8,0],{"text":"Here's the next-PC logic:"}],["gates:and2",[48,48,0]],["port",[-64,112,0],{"signal":"RESET"}],["wire",[32,96,0,-96,0]],["wire",[32,72,0,0,24]],["wire",[48,64,0,0,48]],["gates:inverter",[-64,112,0]],["wire",[-32,112,0,80,0]],["user:inc29",[-80,184,0]],["port",[-80,160,0],{"signal":"PC[30:2]"}],["port",[-80,192,2],{"signal":"PCINC[30:2]"}],["user:ZERO",[0,-32,0]],["text",[-280,-8,0],{"text":"Some constants:"}],["port",[-208,16,0],{"signal":"ILLOP[2]"}],["port",[-208,32,0],{"signal":"ILLOP[31]"}],["port",[-208,48,0],{"signal":"ILLOP[30:3]"}],["port",[-208,88,0],{"signal":"XINT[3]"}],["port",[-208,72,0],{"signal":"XINT[2]"}],["port",[-208,104,0],{"signal":"XINT[31]"}],["port",[-208,120,0],{"signal":"XINT[30:4]"}],["user:ONE",[-216,8,2]],["user:ZERO",[-216,40,2]],["user:ZERO",[-216,112,2]],["user:ZERO",[-216,64,2]],["user:ONE",[-216,24,2]],["user:ONE",[-216,96,2]],["user:ONE",[-216,80,2]]],"icon":[["line",[-32,-24,0,0,32]],["line",[-32,8,0,48,0]],["line",[16,8,0,0,-32]],["line",[16,-24,0,-48,0]],["text",[-8,-11,0],{"text":"PC","align":"center"}],["text",[-8,-4,0],{"text":"subsystem","align":"center"}],["line",[-32,-2,0,5,3]],["line",[-27,1,0,-5,2]],["terminal",[-40,-8,0],{"name":"RESET"}],["terminal",[-40,0,0],{"name":"CLK"}],["terminal",[8,-32,1],{"name":"BT[30:2]"}],["terminal",[-24,-32,1],{"name":"JT[31:2]"}],["terminal",[-40,-16,0],{"name":"PCSEL[2:0]"}],["terminal",[24,-16,2],{"name":"PC[31:0]"}],["terminal",[24,-8,2],{"name":"PCINC[30:2]"}]],"test":[["test","// set up Vdd, establish signaling voltages\n.power Vdd=1\n// Vol, Voh set voltages generated for input signals\n// Vil, Vih set voltage thresholds for determining logic values\n.thresholds Vol=0 Vil=0.1 Vih=0.9 Voh=1\n\n// test actions are applied to named groups of signals.\n// A signal can appear in more than one group.  Order\n// of groups and signals within each group determine \n// order of values on each line of test values\n.group inputs CLK RESET PCSEL[2:0]\n.group outputs PC[31:0]\n\n// set type of simulation to be performed\n//  device -- transient simulation; components must be from from analog library\n//  gate -- gate-level simulation; components must be from gates library\n.mode gate\n\n/*\nTests are sequences of lines supplying test values; .cycle specifies\nthe sequence of actions that will be performed for each test.  Available\nactions are\n   assert group -- set values for signals in group with H,L test values\n   deassert group -- stop setting values for signals in group with H,L test values\n   sample group -- check values of signals in group with 0,1 test values\n   tran time -- run simulation for specified time interval\n   signal=val -- set signal to specified value\n*/\n.cycle assert inputs tran 99n sample outputs tran 1n\n\n// the tests themselves -- one test per line\n//   to assert signal this cycle use 0,1; use Z or - if not to be asserted\n//   to sample signal this cycle use L,H; use - if not to be sampled\n// whitespace can be used to improve readability, non-blank characters\n// are associated, in order, with signals listed in .group above.\n\n// test reset:\n0 0 000 --------------------------------\n0 1 000 00000000000000000000000000000000\n\n\n\n\n// (optional) produce plots showing the test inputs and/or outputs\n.plot CLK, RESET, PCSEL[2:0], PC[31:0]\n\n"]]},"named-signals":{"properties":{},"schematic":[["port",[-48,-40,0],{"signal":"ILLOP[31:0]"}],["wire",[-48,-40,0,16,0]],["port",[-32,-40,2],{"signal":"0x80000008'32"}]],"test":[["test","// set up Vdd, establish signaling voltages\n.power Vdd=1\n// Vol, Voh set voltages generated for input signals\n// Vil, Vih set voltage thresholds for determining logic values\n.thresholds Vol=0 Vil=0.1 Vih=0.9 Voh=1\n\n.group outputs ILLOP[31:0]\n.cycle tran 1n sample outputs tran 1n\n10000000000000000000000000000010\n\n//.plot Z\n"]]},"test-should-fail":{"properties":{},"schematic":[["gates:xor2",[-32,-48,0]],["gates:and2",[-32,-16,0]],["port",[-32,-48,0],{"signal":"A"}],["port",[-32,-32,0],{"signal":"B"}],["port",[-32,-16,0],{"signal":"A"}],["port",[-32,0,0],{"signal":"B"}],["port",[16,-40,2],{"signal":"S"}],["port",[16,-8,2],{"signal":"C"}],["text",[-112,-88,0],{"text":"Simple Half Adder"}]],"icon":[["terminal",[8,-16,2],{"name":"A"}],["terminal",[-8,-32,1],{"name":"B"}],["circle",[-8,-16,0,8]],["terminal",[-8,0,3],{"name":"S"}],["terminal",[-24,-16,0],{"name":"C"}],["text",[-8,-16,0],{"text":"HA","font":"8pt sans-serif","align":"center"}]],"test":[["test","// set up Vdd, establish signaling voltages\n.power Vdd=1\n// Vol, Voh set voltages generated for input signals\n// Vil, Vih set voltage thresholds for determining logic values\n.thresholds Vol=0 Vil=0.1 Vih=0.9 Voh=1\n\n// test actions are applied to named groups of signals.\n// A signal can appear in more than one group.  Order\n// of groups and signals within each group determine \n// order of values on each line of test values\n.group inputs A B\n.group outputs S C\n\n// set type of simulation to be performed\n//  device -- transient simulation; components must be from from analog library\n//  gate -- gate-level simulation; components must be from gates library\n.mode gate\n\n.cycle assert inputs tran .9n sample outputs tran .1n\n00 LL\n01 HL\n10 HL\n11 LH\n\n// OK, this should fail, but doesn't...\n11 LL\n\n.plot A,B,S,C\n"]]}}